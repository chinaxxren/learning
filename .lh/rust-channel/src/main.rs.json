{
    "sourceFile": "rust-channel/src/main.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1732361975236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1732361990611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,9 @@\n struct Transmitter<T> {\n     store: Arc<Mutex<VecDeque<T>>>,\n     emitter: Arc<Condvar>,\n }\n+\n+struct Receiver<T> {\n+    store: Arc<Mutex<VecDeque<T>>>,\n+    emitter: Arc<Condvar>,\n+}\n"
                },
                {
                    "date": 1732362004826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,4 +6,9 @@\n struct Receiver<T> {\n     store: Arc<Mutex<VecDeque<T>>>,\n     emitter: Arc<Condvar>,\n }\n+\n+struct Channel<T> {\n+    tx: Transmitter<T>,\n+    rx: Receiver<T>,\n+}\n"
                },
                {
                    "date": 1732362028283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,4 +11,11 @@\n struct Channel<T> {\n     tx: Transmitter<T>,\n     rx: Receiver<T>,\n }\n+\n+impl<T> Transmitter<T> {\n+    fn send(&self, data: T) {\n+        self.store.lock().unwrap().push_back(data);\n+        self.emitter.notify_one();\n+    }\n+}\n"
                },
                {
                    "date": 1732362042593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,24 @@\n     store: Arc<Mutex<VecDeque<T>>>,\n     emitter: Arc<Condvar>,\n }\n \n+impl<T> Receiver<T> {\n+    fn recv(&self) -> Option<T> {\n+        let mut store = self.store.lock().unwrap();\n+\n+        while store.is_empty() {\n+            store = self.emitter.wait(store).unwrap();\n+        }\n+\n+        store.pop_front()\n+    }\n+\n+    fn try_recv(&self) -> Option<T> {\n+        self.store.lock().unwrap().pop_front()\n+    }\n+}\n+\n struct Channel<T> {\n     tx: Transmitter<T>,\n     rx: Receiver<T>,\n }\n"
                },
                {
                    "date": 1732362057517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,19 @@\n     fn try_recv(&self) -> Option<T> {\n         self.store.lock().unwrap().pop_front()\n     }\n }\n+impl<T> Channel<T> {\n+    fn new() -> Self {\n+        let store = Arc::new(Mutex::new(VecDeque::new()));\n+        let emitter = Arc::new(Condvar::new());\n \n+        Channel {\n+            tx: Transmitter { store: Arc::clone(&store), emitter: Arc::clone(&emitter) },\n+            rx: Receiver { store: Arc::clone(&store), emitter: Arc::clone(&emitter) },\n+        }\n+    }\n+}\n struct Channel<T> {\n     tx: Transmitter<T>,\n     rx: Receiver<T>,\n }\n"
                },
                {
                    "date": 1732362063028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,14 @@\n     fn try_recv(&self) -> Option<T> {\n         self.store.lock().unwrap().pop_front()\n     }\n }\n+\n+struct Channel<T> {\n+    tx: Transmitter<T>,\n+    rx: Receiver<T>,\n+}\n+\n impl<T> Channel<T> {\n     fn new() -> Self {\n         let store = Arc::new(Mutex::new(VecDeque::new()));\n         let emitter = Arc::new(Condvar::new());\n@@ -33,12 +39,8 @@\n             rx: Receiver { store: Arc::clone(&store), emitter: Arc::clone(&emitter) },\n         }\n     }\n }\n-struct Channel<T> {\n-    tx: Transmitter<T>,\n-    rx: Receiver<T>,\n-}\n \n impl<T> Transmitter<T> {\n     fn send(&self, data: T) {\n         self.store.lock().unwrap().push_back(data);\n"
                },
                {
                    "date": 1732362081208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,4 +46,30 @@\n         self.store.lock().unwrap().push_back(data);\n         self.emitter.notify_one();\n     }\n }\n+\n+fn main() {\n+    // 初始化通道\n+    let channel = Channel::new();\n+    let (tx, rx) = (channel.tx, channel.rx);\n+\n+    // 将数据推送到通道\n+    tx.send(\"Some job to do: 1\");\n+    tx.send(\"Another job: 2\");\n+\n+    // 从通道接收数据\n+    let worker = thread::spawn(move || {\n+        loop {\n+            let job = rx.recv(); // 我们也可以使用try_recv\n+\n+            match job {\n+                Some(job) => println!(\"Job: {}\", job),\n+                None => break,\n+            }\n+        }\n+    });\n+\n+    // 向通道推送更多数据\n+    tx.send(\"Yet another job\");\n+\n+    worker.join\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732362098496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,29 +47,4 @@\n         self.emitter.notify_one();\n     }\n }\n \n-fn main() {\n-    // 初始化通道\n-    let channel = Channel::new();\n-    let (tx, rx) = (channel.tx, channel.rx);\n-\n-    // 将数据推送到通道\n-    tx.send(\"Some job to do: 1\");\n-    tx.send(\"Another job: 2\");\n-\n-    // 从通道接收数据\n-    let worker = thread::spawn(move || {\n-        loop {\n-            let job = rx.recv(); // 我们也可以使用try_recv\n-\n-            match job {\n-                Some(job) => println!(\"Job: {}\", job),\n-                None => break,\n-            }\n-        }\n-    });\n-\n-    // 向通道推送更多数据\n-    tx.send(\"Yet another job\");\n-\n-    worker.join\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732362106843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+use std::sync::Arc;\n+\n struct Transmitter<T> {\n     store: Arc<Mutex<VecDeque<T>>>,\n     emitter: Arc<Condvar>,\n }\n@@ -47,4 +49,30 @@\n         self.emitter.notify_one();\n     }\n }\n \n+fn main() {\n+    // 初始化通道\n+    let channel = Channel::new();\n+    let (tx, rx) = (channel.tx, channel.rx);\n+\n+    // 将数据推送到通道\n+    tx.send(\"Some job to do: 1\");\n+    tx.send(\"Another job: 2\");\n+\n+    // 从通道接收数据\n+    let worker = thread::spawn(move || {\n+        loop {\n+            let job = rx.recv(); // 我们也可以使用try_recv\n+\n+            match job {\n+                Some(job) => println!(\"Job: {}\", job),\n+                None => break,\n+            }\n+        }\n+    });\n+\n+    // 向通道推送更多数据\n+    tx.send(\"Yet another job\");\n+\n+    worker.join().unwrap();\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732362138381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-use std::sync::Arc;\n+use std::sync::{Arc, Mutex};\n \n struct Transmitter<T> {\n     store: Arc<Mutex<VecDeque<T>>>,\n     emitter: Arc<Condvar>,\n"
                },
                {
                    "date": 1732362151347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-use std::sync::{Arc, Mutex};\n+use std::{collections::VecDeque, sync::{Arc, Condvar, Mutex}};\n \n struct Transmitter<T> {\n     store: Arc<Mutex<VecDeque<T>>>,\n     emitter: Arc<Condvar>,\n"
                },
                {
                    "date": 1732362161108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-use std::{collections::VecDeque, sync::{Arc, Condvar, Mutex}};\n+use std::{collections::VecDeque, sync::{Arc, Condvar, Mutex}, thread};\n \n struct Transmitter<T> {\n     store: Arc<Mutex<VecDeque<T>>>,\n     emitter: Arc<Condvar>,\n"
                }
            ],
            "date": 1732361975236,
            "name": "Commit-0",
            "content": "struct Transmitter<T> {\n    store: Arc<Mutex<VecDeque<T>>>,\n    emitter: Arc<Condvar>,\n}\n"
        }
    ]
}