{
    "sourceFile": "rust-thread/src/main.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1732343567567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1732343584727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,24 @@\n+use std::sync::{mpsc, Arc, Mutex};\n+use std::thread;\n \n+pub struct ThreadPool {\n+    workers: Vec<Worker>,\n+    sender: mpsc::Sender<Message>,\n+}\n \n+struct Worker {\n+    id: usize,\n+    thread: Option<thread::JoinHandle<()>>,\n+}\n \n+enum Message {\n+    NewTask(Box<dyn FnOnce() + Send + 'static>),\n+    Terminate,\n+}\n \n+\n+\n+\n fn main() {\n     println!(\"Hello, world!\");\n }\n"
                },
                {
                    "date": 1732343590517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,33 @@\n     NewTask(Box<dyn FnOnce() + Send + 'static>),\n     Terminate,\n }\n \n+impl Worker {\n+    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Message>>>) -> Worker {\n+        let thread = thread::spawn(move || loop {\n+            let message = receiver.lock().unwrap().recv().unwrap();\n \n+            match message {\n+                Message::NewTask(task) => {\n+                    println!(\"Worker {id} got a task; executing.\");\n+                    task();\n+                }\n+                Message::Terminate => {\n+                    println!(\"Worker {id} was told to terminate.\");\n+                    break;\n+                }\n+            }\n+        });\n \n+        Worker {\n+            id,\n+            thread: Some(thread),\n+        }\n+    }\n+}\n \n+\n+\n fn main() {\n     println!(\"Hello, world!\");\n }\n"
                },
                {
                    "date": 1732343604173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,16 @@\n     workers: Vec<Worker>,\n     sender: mpsc::Sender<Message>,\n }\n \n+impl ThreadPool {\n+    pub fn execute<F>(&self, task: F)\n+    where\n+        F: FnOnce() + Send + 'static,\n+    {\n+        self.sender.send(Message::NewTask(Box::new(task))).unwrap();\n+    }\n+}\n struct Worker {\n     id: usize,\n     thread: Option<thread::JoinHandle<()>>,\n }\n"
                },
                {
                    "date": 1732343610918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,18 +13,14 @@\n     {\n         self.sender.send(Message::NewTask(Box::new(task))).unwrap();\n     }\n }\n+\n struct Worker {\n     id: usize,\n     thread: Option<thread::JoinHandle<()>>,\n }\n \n-enum Message {\n-    NewTask(Box<dyn FnOnce() + Send + 'static>),\n-    Terminate,\n-}\n-\n impl Worker {\n     fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Message>>>) -> Worker {\n         let thread = thread::spawn(move || loop {\n             let message = receiver.lock().unwrap().recv().unwrap();\n"
                },
                {
                    "date": 1732343617908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,12 @@\n use std::sync::{mpsc, Arc, Mutex};\n use std::thread;\n \n+enum Message {\n+    NewTask(Box<dyn FnOnce() + Send + 'static>),\n+    Terminate,\n+}\n+\n pub struct ThreadPool {\n     workers: Vec<Worker>,\n     sender: mpsc::Sender<Message>,\n }\n"
                },
                {
                    "date": 1732343661928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,21 @@\n         }\n     }\n }\n \n+impl Drop for ThreadPool {\n+    fn drop(&mut self) {\n+        for _ in &self.workers {\n+            self.sender.send(Message::Terminate).unwrap();\n+        }\n \n+        for worker in &mut self.workers {\n+            if let Some(thread) = worker.thread.take() {\n+                thread.join().unwrap();\n+            }\n+        }\n+    }\n+}\n \n fn main() {\n     println!(\"Hello, world!\");\n }\n"
                },
                {
                    "date": 1732343669327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,21 +48,9 @@\n         }\n     }\n }\n \n-impl Drop for ThreadPool {\n-    fn drop(&mut self) {\n-        for _ in &self.workers {\n-            self.sender.send(Message::Terminate).unwrap();\n-        }\n \n-        for worker in &mut self.workers {\n-            if let Some(thread) = worker.thread.take() {\n-                thread.join().unwrap();\n-            }\n-        }\n-    }\n-}\n \n fn main() {\n     println!(\"Hello, world!\");\n }\n"
                },
                {
                    "date": 1732343676046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,21 @@\n         self.sender.send(Message::NewTask(Box::new(task))).unwrap();\n     }\n }\n \n+impl Drop for ThreadPool {\n+    fn drop(&mut self) {\n+        for _ in &self.workers {\n+            self.sender.send(Message::Terminate).unwrap();\n+        }\n+\n+        for worker in &mut self.workers {\n+            if let Some(thread) = worker.thread.take() {\n+                thread.join().unwrap();\n+            }\n+        }\n+    }\n+}\n struct Worker {\n     id: usize,\n     thread: Option<thread::JoinHandle<()>>,\n }\n@@ -49,8 +62,7 @@\n     }\n }\n \n \n-\n fn main() {\n     println!(\"Hello, world!\");\n }\n"
                },
                {
                    "date": 1732343697832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n             }\n         }\n     }\n }\n+\n struct Worker {\n     id: usize,\n     thread: Option<thread::JoinHandle<()>>,\n }\n@@ -63,6 +64,14 @@\n }\n \n \n fn main() {\n-    println!(\"Hello, world!\");\n+    let pool = ThreadPool::new(4);\n+\n+    for i in 0..8 {\n+        pool.execute(move || {\n+            println!(\"Task {i} is running.\");\n+        });\n+    }\n+\n+    println!(\"All tasks dispatched.\");\n }\n"
                },
                {
                    "date": 1732343765846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,12 @@\n     sender: mpsc::Sender<Message>,\n }\n \n impl ThreadPool {\n+    \n+}\n+\n+impl ThreadPool {\n     pub fn execute<F>(&self, task: F)\n     where\n         F: FnOnce() + Send + 'static,\n     {\n"
                },
                {
                    "date": 1732343771296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,11 @@\n     sender: mpsc::Sender<Message>,\n }\n \n impl ThreadPool {\n-    \n+    pub fn () {\n+        \n+    }\n }\n \n impl ThreadPool {\n     pub fn execute<F>(&self, task: F)\n"
                },
                {
                    "date": 1732343777713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,10 @@\n     sender: mpsc::Sender<Message>,\n }\n \n impl ThreadPool {\n-    pub fn () {\n-        \n+    pub fn new(size: usize) -> ThreadPool {\n+           \n     }\n }\n \n impl ThreadPool {\n"
                },
                {
                    "date": 1732343801186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,19 @@\n }\n \n impl ThreadPool {\n     pub fn new(size: usize) -> ThreadPool {\n-           \n+        assert!(size > 0);\n+\n+        let (sender, receiver) = mpsc::channel();\n+        let receiver = Arc::new(Mutex::new(receiver));\n+\n+        let mut workers = Vec::with_capacity(size);\n+\n+        for id in 0..size {\n+            workers.push(Worker::new(id, Arc::clone(&receiver)));\n+        }\n+        /* `ThreadPool` value */   \n     }\n }\n \n impl ThreadPool {\n"
                },
                {
                    "date": 1732343862707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n         for id in 0..size {\n             workers.push(Worker::new(id, Arc::clone(&receiver)));\n         }\n         /* `ThreadPool` value */   \n+        \n     }\n }\n \n impl ThreadPool {\n"
                },
                {
                    "date": 1732343868869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,14 @@\n \n         for id in 0..size {\n             workers.push(Worker::new(id, Arc::clone(&receiver)));\n         }\n+        \n         /* `ThreadPool` value */   \n-        \n+        ThreadPool {\n+            workers,\n+            sender,\n+        }\n     }\n }\n \n impl ThreadPool {\n"
                },
                {
                    "date": 1732343902939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,9 @@\n \n         for id in 0..size {\n             workers.push(Worker::new(id, Arc::clone(&receiver)));\n         }\n-        \n-        /* `ThreadPool` value */   \n+\n         ThreadPool {\n             workers,\n             sender,\n         }\n@@ -60,9 +59,9 @@\n     thread: Option<thread::JoinHandle<()>>,\n }\n \n impl Worker {\n-    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Message>>>) -> Worker {\n+    fn new( : usize, receiver: Arc<Mutex<mpsc::Receiver<Message>>>) -> Worker {\n         let thread = thread::spawn(move || loop {\n             let message = receiver.lock().unwrap().recv().unwrap();\n \n             match message {\n"
                },
                {
                    "date": 1732343912000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n     thread: Option<thread::JoinHandle<()>>,\n }\n \n impl Worker {\n-    fn new( : usize, receiver: Arc<Mutex<mpsc::Receiver<Message>>>) -> Worker {\n+    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Message>>>) -> Worker {\n         let thread = thread::spawn(move || loop {\n             let message = receiver.lock().unwrap().recv().unwrap();\n \n             match message {\n@@ -86,9 +86,9 @@\n \n fn main() {\n     let pool = ThreadPool::new(4);\n \n-    for i in 0..8 {\n+    for i in 0..10 {\n         pool.execute(move || {\n             println!(\"Task {i} is running.\");\n         });\n     }\n"
                },
                {
                    "date": 1732343935668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,4 +94,5 @@\n     }\n \n     println!(\"All tasks dispatched.\");\n }\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1732343567567,
            "name": "Commit-0",
            "content": "\n\n\n\nfn main() {\n    println!(\"Hello, world!\");\n}\n"
        }
    ]
}