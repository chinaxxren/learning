{
    "sourceFile": "rust-demo/file/4_replace.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1731134883377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731134894032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,12 +15,9 @@\n     }\n \n     fn replace_atomic(&self, content: &[u8]) -> io::Result<()> {\n         // 创建临时文件\n-        let temp_path = format!(\"{}.{}.tmp\", \n-            self.target_path,\n-            Uuid::new_v4().to_string()\n-        );\n+        let temp_path = format!(\"{}.{}.tmp\", self.target_path, Uuid::new_v4().to_string());\n \n         // 写入临时文件\n         {\n             let mut file = File::create(&temp_path)?;\n@@ -31,5 +28,5 @@\n         // 原子替换\n         fs::rename(temp_path, &self.target_path)?;\n         Ok(())\n     }\n-}\n\\ No newline at end of file\n+}\n"
                },
                {
                    "date": 1731134910638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,4 +29,6 @@\n         fs::rename(temp_path, &self.target_path)?;\n         Ok(())\n     }\n }\n+\n+fn\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731134917267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,5 +30,14 @@\n         Ok(())\n     }\n }\n \n-fn\n\\ No newline at end of file\n+fn main() -> io::Result<()> {\n+    let path = \"./file/safe_replace.txt\";\n+    let content = b\"This is a test content.\";\n+\n+    let replacer = SafeFileReplacer::new(path);\n+    replacer.replace_atomic(content)?;\n+\n+    println!(\"File replaced successfully.\");\n+    Ok(())\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731134958038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     }\n }\n \n fn main() -> io::Result<()> {\n-    let path = \"./file/safe_replace.txt\";\n+    let path = \".txt\";\n     let content = b\"This is a test content.\";\n \n     let replacer = SafeFileReplacer::new(path);\n     replacer.replace_atomic(content)?;\n"
                },
                {
                    "date": 1731134963240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     }\n }\n \n fn main() -> io::Result<()> {\n-    let path = \".txt\";\n+    let path = \"test.txt\";\n     let content = b\"This is a test content.\";\n \n     let replacer = SafeFileReplacer::new(path);\n     replacer.replace_atomic(content)?;\n"
                },
                {
                    "date": 1731135077822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n use std::fs::{self, File};\n use std::io::{self, Write};\n-use std::path::Path;\n use uuid::Uuid;\n \n struct SafeFileReplacer {\n     target_path: String,\n"
                },
                {
                    "date": 1731135090055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     }\n \n     fn replace_atomic(&self, content: &[u8]) -> io::Result<()> {\n         // 创建临时文件\n-        let temp_path = format!(\"{}.{}.tmp\", self.target_path, Uuid::new_v4().to_string());\n+        let temp_path = format!(\"{}.{}.tmp\", self.target_path, Uuid::n.to_string());\n \n         // 写入临时文件\n         {\n             let mut file = File::create(&temp_path)?;\n"
                },
                {
                    "date": 1731135095907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     }\n \n     fn replace_atomic(&self, content: &[u8]) -> io::Result<()> {\n         // 创建临时文件\n-        let temp_path = format!(\"{}.{}.tmp\", self.target_path, Uuid::n.to_string());\n+        let temp_path = format!(\"{}.{}.tmp\", self.target_path, Uuid::new.to_string());\n \n         // 写入临时文件\n         {\n             let mut file = File::create(&temp_path)?;\n"
                },
                {
                    "date": 1731135133384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     }\n \n     fn replace_atomic(&self, content: &[u8]) -> io::Result<()> {\n         // 创建临时文件\n-        let temp_path = format!(\"{}.{}.tmp\", self.target_path, Uuid::new.to_string());\n+        let temp_path = format!(\"{}.{}.tmp\", self.target_path, Uuid::urn()().to_string());\n \n         // 写入临时文件\n         {\n             let mut file = File::create(&temp_path)?;\n"
                },
                {
                    "date": 1731135213833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     }\n \n     fn replace_atomic(&self, content: &[u8]) -> io::Result<()> {\n         // 创建临时文件\n-        let temp_path = format!(\"{}.{}.tmp\", self.target_path, Uuid::urn()().to_string());\n+        let temp_path = format!(\"{}.{}.tmp\", self.target_path, Uuid::to_string());\n \n         // 写入临时文件\n         {\n             let mut file = File::create(&temp_path)?;\n"
                },
                {
                    "date": 1731135222413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     }\n \n     fn replace_atomic(&self, content: &[u8]) -> io::Result<()> {\n         // 创建临时文件\n-        let temp_path = format!(\"{}.{}.tmp\", self.target_path, Uuid::to_string());\n+        let temp_path = format!(\"{}.{}.tmp\", self.target_path, Uuid::::to_string());\n \n         // 写入临时文件\n         {\n             let mut file = File::create(&temp_path)?;\n"
                },
                {
                    "date": 1731135228113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     }\n \n     fn replace_atomic(&self, content: &[u8]) -> io::Result<()> {\n         // 创建临时文件\n-        let temp_path = format!(\"{}.{}.tmp\", self.target_path, Uuid::::to_string());\n+        let temp_path = format!(\"{}.{}.tmp\", self.target_path, Uuid::new_v4()::to_string());\n \n         // 写入临时文件\n         {\n             let mut file = File::create(&temp_path)?;\n"
                },
                {
                    "date": 1731135266907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     }\n \n     fn replace_atomic(&self, content: &[u8]) -> io::Result<()> {\n         // 创建临时文件\n-        let temp_path = format!(\"{}.{}.tmp\", self.target_path, Uuid::new_v4()::to_string());\n+        let temp_path = format!(\"{}.{}.tmp\", self.target_path, Uuid::new_v4().to_string());\n \n         // 写入临时文件\n         {\n             let mut file = File::create(&temp_path)?;\n"
                },
                {
                    "date": 1731135283881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     }\n \n     fn replace_atomic(&self, content: &[u8]) -> io::Result<()> {\n         // 创建临时文件\n-        let temp_path = format!(\"{}.{}.tmp\", self.target_path, Uuid::new_v4().to_string());\n+        let temp_path = format!(\"{}.{}.tmp\", self.target_path, );\n \n         // 写入临时文件\n         {\n             let mut file = File::create(&temp_path)?;\n"
                },
                {
                    "date": 1731135291353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     }\n \n     fn replace_atomic(&self, content: &[u8]) -> io::Result<()> {\n         // 创建临时文件\n-        let temp_path = format!(\"{}.{}.tmp\", self.target_path, );\n+        let temp_path = format!(\"{}.{}.tmp\", self.target_path, \"ac\");\n \n         // 写入临时文件\n         {\n             let mut file = File::create(&temp_path)?;\n"
                },
                {
                    "date": 1731135297368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     }\n \n     fn replace_atomic(&self, content: &[u8]) -> io::Result<()> {\n         // 创建临时文件\n-        let temp_path = format!(\"{}.{}.tmp\", self.target_path, \"ac\");\n+        let temp_path = format!(\"{}.{}.tmp\", self.target_path, \"aceb1c2d3e4f5g6h7i8j9k0l1m2n3o4p5q6r7s8t9u1v2w3x4y5z6\");\n \n         // 写入临时文件\n         {\n             let mut file = File::create(&temp_path)?;\n"
                },
                {
                    "date": 1731135302946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n use std::fs::{self, File};\n use std::io::{self, Write};\n-use uuid::Uuid;\n \n struct SafeFileReplacer {\n     target_path: String,\n }\n"
                },
                {
                    "date": 1731135340464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     }\n \n     fn replace_atomic(&self, content: &[u8]) -> io::Result<()> {\n         // 创建临时文件\n-        let temp_path = format!(\"{}.{}.tmp\", self.target_path, \"aceb1c2d3e4f5g6h7i8j9k0l1m2n3o4p5q6r7s8t9u1v2w3x4y5z6\");\n+        let temp_path = format!(\"{}.{}.tmp\", self.target_path, \"abc\");\n \n         // 写入临时文件\n         {\n             let mut file = File::create(&temp_path)?;\n"
                },
                {
                    "date": 1731135374363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n         }\n \n         // 原子替换\n         fs::rename(temp_path, &self.target_path)?;\n+        \n         Ok(())\n     }\n }\n \n"
                }
            ],
            "date": 1731134883377,
            "name": "Commit-0",
            "content": "use std::fs::{self, File};\nuse std::io::{self, Write};\nuse std::path::Path;\nuse uuid::Uuid;\n\nstruct SafeFileReplacer {\n    target_path: String,\n}\n\nimpl SafeFileReplacer {\n    fn new(path: &str) -> Self {\n        Self {\n            target_path: path.to_string(),\n        }\n    }\n\n    fn replace_atomic(&self, content: &[u8]) -> io::Result<()> {\n        // 创建临时文件\n        let temp_path = format!(\"{}.{}.tmp\", \n            self.target_path,\n            Uuid::new_v4().to_string()\n        );\n\n        // 写入临时文件\n        {\n            let mut file = File::create(&temp_path)?;\n            file.write_all(content)?;\n            file.flush()?;\n        }\n\n        // 原子替换\n        fs::rename(temp_path, &self.target_path)?;\n        Ok(())\n    }\n}"
        }
    ]
}