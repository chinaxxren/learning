{
    "sourceFile": "rust-demo/file/1_buffer.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1731133838312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731133844741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,5 +45,5 @@\n     handler.write_string(\"Hello, world!\").unwrap();\n     handler.append_string(\"\\nHello, world!\").unwrap();\n     let content = handler.read_to_string().unwrap();\n     println!(\"{}\", content);\n-}\n\\ No newline at end of file\n+}\n"
                }
            ],
            "date": 1731133838312,
            "name": "Commit-0",
            "content": "use std::fs::{self, File};\nuse std::io::{self, BufReader, BufWriter, Read, Write};\n\nstruct SmartFileHandler {\n    path: String,\n}\n\nimpl SmartFileHandler {\n    fn new(path: &str) -> Self {\n        Self {\n            path: path.to_string(),\n        }\n    }\n\n    fn read_to_string(&self) -> io::Result<String> {\n        let file = File::open(&self.path)?;\n        let mut reader = BufReader::new(file);\n        let mut content = String::new();\n        reader.read_to_string(&mut content)?;\n        Ok(content)\n    }\n\n    fn write_string(&self, content: &str) -> io::Result<()> {\n        let file = File::create(&self.path)?;\n        let mut writer = BufWriter::new(file);\n        writer.write_all(content.as_bytes())?;\n        writer.flush()?;\n        Ok(())\n    }\n\n    fn append_string(&self, content: &str) -> io::Result<()> {\n        let file = fs::OpenOptions::new()\n            .append(true)\n            .create(true)\n            .open(&self.path)?;\n        let mut writer = BufWriter::new(file);\n        writer.write_all(content.as_bytes())?;\n        writer.flush()?;\n        Ok(())\n    }\n}\n\nfn main() {\n    let handler = SmartFileHandler::new(\"test.txt\");\n    handler.write_string(\"Hello, world!\").unwrap();\n    handler.append_string(\"\\nHello, world!\").unwrap();\n    let content = handler.read_to_string().unwrap();\n    println!(\"{}\", content);\n}"
        }
    ]
}