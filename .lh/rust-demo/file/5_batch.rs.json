{
    "sourceFile": "rust-demo/file/5_batch.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1731135426302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731135437641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n+use rayon::prelude::*;\n use std::fs::{self, DirBuilder};\n use std::path::Path;\n-use rayon::prelude::*;\n \n struct BatchFileProcessor {\n     source_dir: String,\n     target_dir: String,\n@@ -19,11 +19,9 @@\n     where\n         F: Fn(&[u8]) -> Vec<u8> + Send + Sync,\n     {\n         // 确保目标目录存在\n-        DirBuilder::new()\n-            .recursive(true)\n-            .create(&self.target_dir)?;\n+        DirBuilder::new().recursive(true).create(&self.target_dir)?;\n \n         // 获取所有文件\n         let entries: Vec<_> = fs::read_dir(&self.source_dir)?\n             .filter_map(Result::ok)\n@@ -35,10 +33,9 @@\n             if path.is_file() {\n                 let content = fs::read(&path)?;\n                 let processed = processor(&content);\n \n-                let target_path = Path::new(&self.target_dir)\n-                    .join(path.file_name().unwrap());\n+                let target_path = Path::new(&self.target_dir).join(path.file_name().unwrap());\n                 fs::write(target_path, processed)?;\n             }\n             Ok(())\n         })\n"
                },
                {
                    "date": 1731135486573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,30 +14,42 @@\n             target_dir: target.to_string(),\n         }\n     }\n \n+        // 定义一个异步函数，用于处理文件\n     fn process_files<F>(&self, processor: F) -> io::Result<()>\n+    // 定义一个泛型类型 F，它必须实现 Fn(&[u8]) -> Vec<u8> + Send + Sync 这三个 trait\n     where\n         F: Fn(&[u8]) -> Vec<u8> + Send + Sync,\n     {\n-        // 确保目标目录存在\n+        // 确保目标目录存在，如果不存在则创建\n         DirBuilder::new().recursive(true).create(&self.target_dir)?;\n \n-        // 获取所有文件\n+        // 获取源目录下的所有文件和目录\n         let entries: Vec<_> = fs::read_dir(&self.source_dir)?\n-            .filter_map(Result::ok)\n-            .collect();\n+            // 过滤掉读取目录时可能出现的错误\n+           .filter_map(Result::ok)\n+            // 将结果收集到一个向量中\n+           .collect();\n \n-        // 并行处理文件\n+        // 使用 rayon 库的 parallel iterator 并行处理文件\n         entries.par_iter().try_for_each(|entry| {\n+            // 获取文件的路径\n             let path = entry.path();\n+            // 如果路径指向的是一个文件\n             if path.is_file() {\n+                // 读取文件的内容\n                 let content = fs::read(&path)?;\n+                // 使用传入的处理器函数处理文件内容\n                 let processed = processor(&content);\n \n+                // 构建目标文件的路径\n                 let target_path = Path::new(&self.target_dir).join(path.file_name().unwrap());\n+                // 将处理后的内容写入到目标文件中\n                 fs::write(target_path, processed)?;\n             }\n+            // 返回一个 Result 类型，表示操作是否成功\n             Ok(())\n         })\n     }\n+\n }\n"
                },
                {
                    "date": 1731135520251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n             target_dir: target.to_string(),\n         }\n     }\n \n-        // 定义一个异步函数，用于处理文件\n+    // 定义一个异步函数，用于处理文件\n     fn process_files<F>(&self, processor: F) -> io::Result<()>\n     // 定义一个泛型类型 F，它必须实现 Fn(&[u8]) -> Vec<u8> + Send + Sync 这三个 trait\n     where\n         F: Fn(&[u8]) -> Vec<u8> + Send + Sync,\n@@ -26,11 +26,11 @@\n \n         // 获取源目录下的所有文件和目录\n         let entries: Vec<_> = fs::read_dir(&self.source_dir)?\n             // 过滤掉读取目录时可能出现的错误\n-           .filter_map(Result::ok)\n+            .filter_map(Result::ok)\n             // 将结果收集到一个向量中\n-           .collect();\n+            .collect();\n \n         // 使用 rayon 库的 parallel iterator 并行处理文件\n         entries.par_iter().try_for_each(|entry| {\n             // 获取文件的路径\n@@ -50,6 +50,7 @@\n             // 返回一个 Result 类型，表示操作是否成功\n             Ok(())\n         })\n     }\n+}\n \n-}\n+fn main() {\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731135526939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,5 +52,14 @@\n         })\n     }\n }\n \n-fn main() {\n\\ No newline at end of file\n+fn main() {\n+    let processor = BatchFileProcessor::new(\"source\", \"target\");\n+    processor.process_files(|content| {\n+        // 假设我们要对文件内容进行加密处理\n+        let mut result = Vec::new();\n+        for byte in content {\n+            result.push(byte ^ 0x55);\n+        }\n+        result\n+    }).unwrap();\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731135537383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,12 +54,15 @@\n }\n \n fn main() {\n     let processor = BatchFileProcessor::new(\"source\", \"target\");\n-    processor.process_files(|content| {\n-        // 假设我们要对文件内容进行加密处理\n-        let mut result = Vec::new();\n-        for byte in content {\n-            result.push(byte ^ 0x55);\n-        }\n-        result\n-    }).unwrap();\n\\ No newline at end of file\n+    processor\n+        .process_files(|content| {\n+            // 假设我们要对文件内容进行加密处理\n+            let mut result = Vec::new();\n+            for byte in content {\n+                result.push(byte ^ 0x55);\n+            }\n+            result\n+        })\n+        .unwrap();\n+}\n"
                },
                {
                    "date": 1731135612872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n     }\n }\n \n fn main() {\n-    let processor = BatchFileProcessor::new(\"source\", \"target\");\n+    let processor = BatchFileProcessor::new(\"source\", \"./rust-demo\");\n     processor\n         .process_files(|content| {\n             // 假设我们要对文件内容进行加密处理\n             let mut result = Vec::new();\n"
                },
                {
                    "date": 1731135618650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n     }\n }\n \n fn main() {\n-    let processor = BatchFileProcessor::new(\"source\", \"./rust-demo\");\n+    let processor = BatchFileProcessor::new(\"source\", \"./rust-demo/file\");\n     processor\n         .process_files(|content| {\n             // 假设我们要对文件内容进行加密处理\n             let mut result = Vec::new();\n"
                },
                {
                    "date": 1731135624229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n     }\n }\n \n fn main() {\n-    let processor = BatchFileProcessor::new(\"source\", \"./rust-demo/file\");\n+    let processor = BatchFileProcessor::new(\"sources\", \"./rust-demo/file\");\n     processor\n         .process_files(|content| {\n             // 假设我们要对文件内容进行加密处理\n             let mut result = Vec::new();\n"
                },
                {
                    "date": 1731135673731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n use rayon::prelude::*;\n use std::fs::{self, DirBuilder};\n use std::path::Path;\n+use\n \n struct BatchFileProcessor {\n     source_dir: String,\n     target_dir: String,\n"
                },
                {
                    "date": 1731136876134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n use rayon::prelude::*;\n use std::fs::{self, DirBuilder};\n use std::path::Path;\n-use\n+use std::io;\n \n struct BatchFileProcessor {\n     source_dir: String,\n     target_dir: String,\n@@ -54,11 +54,10 @@\n     }\n }\n \n fn main() {\n-    let processor = BatchFileProcessor::new(\"sources\", \"./rust-demo/file\");\n-    processor\n-        .process_files(|content| {\n+    let processor = BatchFileProcessor::new(\"tests\", \"./rust-demo/file\");\n+    processor.process_files(|content| {\n             // 假设我们要对文件内容进行加密处理\n             let mut result = Vec::new();\n             for byte in content {\n                 result.push(byte ^ 0x55);\n"
                }
            ],
            "date": 1731135426302,
            "name": "Commit-0",
            "content": "use std::fs::{self, DirBuilder};\nuse std::path::Path;\nuse rayon::prelude::*;\n\nstruct BatchFileProcessor {\n    source_dir: String,\n    target_dir: String,\n}\n\nimpl BatchFileProcessor {\n    fn new(source: &str, target: &str) -> Self {\n        Self {\n            source_dir: source.to_string(),\n            target_dir: target.to_string(),\n        }\n    }\n\n    fn process_files<F>(&self, processor: F) -> io::Result<()>\n    where\n        F: Fn(&[u8]) -> Vec<u8> + Send + Sync,\n    {\n        // 确保目标目录存在\n        DirBuilder::new()\n            .recursive(true)\n            .create(&self.target_dir)?;\n\n        // 获取所有文件\n        let entries: Vec<_> = fs::read_dir(&self.source_dir)?\n            .filter_map(Result::ok)\n            .collect();\n\n        // 并行处理文件\n        entries.par_iter().try_for_each(|entry| {\n            let path = entry.path();\n            if path.is_file() {\n                let content = fs::read(&path)?;\n                let processed = processor(&content);\n\n                let target_path = Path::new(&self.target_dir)\n                    .join(path.file_name().unwrap());\n                fs::write(target_path, processed)?;\n            }\n            Ok(())\n        })\n    }\n}\n"
        }
    ]
}