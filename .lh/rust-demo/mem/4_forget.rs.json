{
    "sourceFile": "rust-demo/mem/4_forget.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1731119759992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731119766842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+use std::mem;\n+\n fn memory_leak_examples() {\n     // forget 防止析构函数被调用\n     struct NeedCleanup {\n         data: Vec<u8>,\n"
                },
                {
                    "date": 1731119781211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,9 @@\n use std::mem;\n \n-fn memory_leak_examples() {\n-    // forget 防止析构函数被调用\n-    struct NeedCleanup {\n-        data: Vec<u8>,\n-    }\n+fn main() {\n+   \n \n-    impl Drop for NeedCleanup {\n-        fn drop(&mut self) {\n-            println!(\"Cleaning up!\");\n-        }\n-    }\n-\n     let cleanup = NeedCleanup {\n         data: vec![1, 2, 3],\n     };\n \n"
                },
                {
                    "date": 1731119787249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,17 @@\n use std::mem;\n \n+ // forget 防止析构函数被调用\n+ struct NeedCleanup {\n+    data: Vec<u8>,\n+}\n+\n+impl Drop for NeedCleanup {\n+    fn drop(&mut self) {\n+        println!(\"Cleaning up!\");\n+    }\n+}\n+\n fn main() {\n    \n \n     let cleanup = NeedCleanup {\n"
                },
                {
                    "date": 1731119794043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,8 @@\n     }\n }\n \n fn main() {\n-   \n \n     let cleanup = NeedCleanup {\n         data: vec![1, 2, 3],\n     };\n"
                },
                {
                    "date": 1731119885107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,5 +20,6 @@\n     // 使用forget后不会调用drop\n     mem::forget(cleanup);\n \n     // 注意：这可能导致内存泄漏，慎用！\n+    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731119891213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,6 +20,6 @@\n     // 使用forget后不会调用drop\n     mem::forget(cleanup);\n \n     // 注意：这可能导致内存泄漏，慎用！\n-    \n+    dbg!()\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731119897714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,6 +20,6 @@\n     // 使用forget后不会调用drop\n     mem::forget(cleanup);\n \n     // 注意：这可能导致内存泄漏，慎用！\n-    dbg!()\n+    dbg!(cleanup);\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731119909124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,6 +20,6 @@\n     // 使用forget后不会调用drop\n     mem::forget(cleanup);\n \n     // 注意：这可能导致内存泄漏，慎用！\n-    dbg!(cleanup);\n+    drop(cleanup);\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731119915007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         data: vec![1, 2, 3],\n     };\n \n     // 使用forget后不会调用drop\n-    mem::forget(cleanup);\n+    // mem::forget(cleanup);\n \n     // 注意：这可能导致内存泄漏，慎用！\n     drop(cleanup);\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731119932977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,6 +20,6 @@\n     // 使用forget后不会调用drop\n     // mem::forget(cleanup);\n \n     // 注意：这可能导致内存泄漏，慎用！\n-    drop(cleanup);\n+    // drop(cleanup);\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731119954420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         data: vec![1, 2, 3],\n     };\n \n     // 使用forget后不会调用drop\n-    // mem::forget(cleanup);\n+    mem::forget(cleanup);\n \n     // 注意：这可能导致内存泄漏，慎用！\n     // drop(cleanup);\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731119959682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     let cleanup = NeedCleanup {\n         data: vec![1, 2, 3],\n     };\n \n-    // 使用forget后不会调用drop\n+    // 使用forget后不会调用drop,\n     mem::forget(cleanup);\n \n     // 注意：这可能导致内存泄漏，慎用！\n     // drop(cleanup);\n"
                },
                {
                    "date": 1731119965897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     let cleanup = NeedCleanup {\n         data: vec![1, 2, 3],\n     };\n \n-    // 使用forget后不会调用drop,\n+    // 使用forget后不会调用drop,所以就不会da\n     mem::forget(cleanup);\n \n     // 注意：这可能导致内存泄漏，慎用！\n     // drop(cleanup);\n"
                },
                {
                    "date": 1731119971047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     let cleanup = NeedCleanup {\n         data: vec![1, 2, 3],\n     };\n \n-    // 使用forget后不会调用drop,所以就不会da\n+    // 使用forget后不会调用drop,所以就不会da'y\n     mem::forget(cleanup);\n \n     // 注意：这可能导致内存泄漏，慎用！\n     // drop(cleanup);\n"
                },
                {
                    "date": 1731119977917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     let cleanup = NeedCleanup {\n         data: vec![1, 2, 3],\n     };\n \n-    // 使用forget后不会调用drop,所以就不会da'y\n+    // 使用forget后不会调用drop,所以就不会打印Cleaning up!\n     mem::forget(cleanup);\n \n     // 注意：这可能导致内存泄漏，慎用！\n     // drop(cleanup);\n"
                }
            ],
            "date": 1731119759992,
            "name": "Commit-0",
            "content": "fn memory_leak_examples() {\n    // forget 防止析构函数被调用\n    struct NeedCleanup {\n        data: Vec<u8>,\n    }\n\n    impl Drop for NeedCleanup {\n        fn drop(&mut self) {\n            println!(\"Cleaning up!\");\n        }\n    }\n\n    let cleanup = NeedCleanup {\n        data: vec![1, 2, 3],\n    };\n\n    // 使用forget后不会调用drop\n    mem::forget(cleanup);\n\n    // 注意：这可能导致内存泄漏，慎用！\n}"
        }
    ]
}