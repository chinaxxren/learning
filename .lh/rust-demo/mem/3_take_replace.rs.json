{
    "sourceFile": "rust-demo/mem/3_take_replace.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 39,
            "patches": [
                {
                    "date": 1731118852106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731118858945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n-fn advanced_take_replace() {\n+\n+fn main() {\n     // take 经常用于处理Option\n     let mut opt = Some(42);\n     let value = mem::take(&mut opt);\n     assert_eq!(value, Some(42));\n"
                },
                {
                    "date": 1731118958501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,11 @@\n+use std::mem;\n \n fn main() {\n     // take 经常用于处理Option\n     let mut opt = Some(42);\n     let value = mem::take(&mut opt);\n     assert_eq!(value, Some(42));\n     assert_eq!(opt, None);\n \n-    // 链表节点替换示例\n-    struct Node {\n-        next: Option<Box<Node>>,\n-        value: i32,\n-    }\n-\n-    impl Node {\n-        fn take_next(&mut self) -> Option<Box<Node>> {\n-            mem::take(&mut self.next)\n-        }\n-\n-        fn replace_value(&mut self, new_value: i32) -> i32 {\n-            mem::replace(&mut self.value, new_value)\n-        }\n-    }\n+    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731118974673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,25 @@\n use std::mem;\n \n+// 链表节点替换示例\n+struct Node {\n+    next: Option<Box<Node>>,\n+    value: i32,\n+}\n+\n+impl Node {\n+    fn take_next(&mut self) -> Option<Box<Node>> {\n+        mem::take(&mut self.next)\n+    }\n+\n+    fn replace_value(&mut self, new_value: i32) -> i32 {\n+        mem::replace(&mut self.value, new_value)\n+    }\n+}\n+\n fn main() {\n     // take 经常用于处理Option\n     let mut opt = Some(42);\n     let value = mem::take(&mut opt);\n     assert_eq!(value, Some(42));\n     assert_eq!(opt, None);\n-\n-    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731119033771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,5 +21,7 @@\n     let mut opt = Some(42);\n     let value = mem::take(&mut opt);\n     assert_eq!(value, Some(42));\n     assert_eq!(opt, None);\n+\n+    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731119039821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,6 +22,6 @@\n     let value = mem::take(&mut opt);\n     assert_eq!(value, Some(42));\n     assert_eq!(opt, None);\n \n-    \n+    let mut node = Node {\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731119050764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,5 +23,13 @@\n     assert_eq!(value, Some(42));\n     assert_eq!(opt, None);\n \n     let mut node = Node {\n+        next: Some(Box::new(Node {\n+            next: None,\n+            value: 42,\n+        })),\n+        value: 10,\n+    };\n+\n+    let next = node.take_next();\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731119057266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,5 +31,8 @@\n         value: 10,\n     };\n \n     let next = node.take_next();\n+    assert_eq!(next.unwrap().value, 42);\n+\n+    let old_value = node.replace_value(20);\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731119062339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,5 +34,7 @@\n     let next = node.take_next();\n     assert_eq!(next.unwrap().value, 42);\n \n     let old_value = node.replace_value(20);\n+    assert_eq!(old_value, 10);\n+    assert_eq!(node.value, 20);\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731119192249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         value: 10,\n     };\n \n     let next = node.take_next();\n-    assert_eq!(next.unwrap().value, 42);\n+    assert_eq!(.value, 42);\n \n     let old_value = node.replace_value(20);\n     assert_eq!(old_value, 10);\n     assert_eq!(node.value, 20);\n"
                },
                {
                    "date": 1731119198775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n         value: 10,\n     };\n \n     let next = node.take_next();\n+    let next \n     assert_eq!(.value, 42);\n \n     let old_value = node.replace_value(20);\n     assert_eq!(old_value, 10);\n"
                },
                {
                    "date": 1731119207190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,9 @@\n         value: 10,\n     };\n \n     let next = node.take_next();\n-    let next \n-    assert_eq!(.value, 42);\n+    let next = next.unwrap();\n \n     let old_value = node.replace_value(20);\n     assert_eq!(old_value, 10);\n     assert_eq!(node.value, 20);\n"
                },
                {
                    "date": 1731119229549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,11 @@\n     };\n \n     let next = node.take_next();\n     let next = next.unwrap();\n-\n+    assert_eq!(next.value, 42);\n+    assert_eq!(node.value, 10);\n+    \n     let old_value = node.replace_value(20);\n     assert_eq!(old_value, 10);\n     assert_eq!(node.value, 20);\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731119263773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,12 +31,14 @@\n         value: 10,\n     };\n \n     let next = node.take_next();\n+    \n     let next = next.unwrap();\n     assert_eq!(next.value, 42);\n     assert_eq!(node.value, 10);\n-    \n+\n+    // replace 经常用于处理可变引用\n     let old_value = node.replace_value(20);\n     assert_eq!(old_value, 10);\n     assert_eq!(node.value, 20);\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731119270240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         value: 10,\n     };\n \n     let next = node.take_next();\n-    \n+    let take = \n     let next = next.unwrap();\n     assert_eq!(next.value, 42);\n     assert_eq!(node.value, 10);\n \n"
                },
                {
                    "date": 1731119279377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         value: 10,\n     };\n \n     let next = node.take_next();\n-    let take = \n+    let take = next.take()\n     let next = next.unwrap();\n     assert_eq!(next.value, 42);\n     assert_eq!(node.value, 10);\n \n"
                },
                {
                    "date": 1731119293140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,11 @@\n         })),\n         value: 10,\n     };\n \n-    let next = node.take_next();\n-    let take = next.take()\n+    let mut next = node.take_next();\n+    let take = next.take();\n+    \n     let next = next.unwrap();\n     assert_eq!(next.value, 42);\n     assert_eq!(node.value, 10);\n \n"
                },
                {
                    "date": 1731119309989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         value: 10,\n     };\n \n     let mut next = node.take_next();\n-    let take = next.take();\n+    let  = next.take();\n     \n     let next = next.unwrap();\n     assert_eq!(next.value, 42);\n     assert_eq!(node.value, 10);\n"
                },
                {
                    "date": 1731119321459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         value: 10,\n     };\n \n     let mut next = node.take_next();\n-    let  = next.take();\n+    let tak = next.take();\n     \n     let next = next.unwrap();\n     assert_eq!(next.value, 42);\n     assert_eq!(node.value, 10);\n"
                },
                {
                    "date": 1731119328611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         value: 10,\n     };\n \n     let mut next = node.take_next();\n-    let tak = next.take();\n+    let take:Som = next.take();\n     \n     let next = next.unwrap();\n     assert_eq!(next.value, 42);\n     assert_eq!(node.value, 10);\n"
                },
                {
                    "date": 1731119334005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         value: 10,\n     };\n \n     let mut next = node.take_next();\n-    let take:Som = next.take();\n+    let Some() = next.take();\n     \n     let next = next.unwrap();\n     assert_eq!(next.value, 42);\n     assert_eq!(node.value, 10);\n"
                },
                {
                    "date": 1731119340670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         value: 10,\n     };\n \n     let mut next = node.take_next();\n-    let Some() = next.take();\n+    let Some(a ) = next.take();\n     \n     let next = next.unwrap();\n     assert_eq!(next.value, 42);\n     assert_eq!(node.value, 10);\n"
                },
                {
                    "date": 1731119348799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         value: 10,\n     };\n \n     let mut next = node.take_next();\n-    let Some(a ) = next.take();\n+   if let Some(a ) = next.take();\n     \n     let next = next.unwrap();\n     assert_eq!(next.value, 42);\n     assert_eq!(node.value, 10);\n"
                },
                {
                    "date": 1731119354555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,11 @@\n         value: 10,\n     };\n \n     let mut next = node.take_next();\n-   if let Some(a ) = next.take();\n+   if let Some(a ) = next.take() {\n+       println!(\"a: {}\", a.value);\n+   }\n     \n     let next = next.unwrap();\n     assert_eq!(next.value, 42);\n     assert_eq!(node.value, 10);\n"
                },
                {
                    "date": 1731119360324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     };\n \n     let mut next = node.take_next();\n    if let Some(a ) = next.take() {\n-       println!(\"a: {}\", a.value);\n+       println!(\"a: {}\", a.value);Ff\n    }\n     \n     let next = next.unwrap();\n     assert_eq!(next.value, 42);\n"
                },
                {
                    "date": 1731119367577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,17 +31,18 @@\n         value: 10,\n     };\n \n     let mut next = node.take_next();\n-   if let Some(a ) = next.take() {\n-       println!(\"a: {}\", a.value);Ff\n-   }\n-    \n+    if let Some(a) = next.take() {\n+        println!(\"a: {}\", a.value);\n+        \n+    }\n+\n     let next = next.unwrap();\n     assert_eq!(next.value, 42);\n     assert_eq!(node.value, 10);\n \n\\ No newline at end of file\n     // replace 经常用于处理可变引用\n     let old_value = node.replace_value(20);\n     assert_eq!(old_value, 10);\n     assert_eq!(node.value, 20);\n-}\n+}\n"
                },
                {
                    "date": 1731119439020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,16 +33,17 @@\n \n     let mut next = node.take_next();\n     if let Some(a) = next.take() {\n         println!(\"a: {}\", a.value);\n-        \n+    } else {\n+        println!(\"next is None\");\n     }\n \n-    let next = next.unwrap();\n-    assert_eq!(next.value, 42);\n-    assert_eq!(node.value, 10);\n+    // let next = next.unwrap();\n+    // assert_eq!(next.value, 42);\n+    // assert_eq!(node.value, 10);\n \n\\ No newline at end of file\n     // replace 经常用于处理可变引用\n     let old_value = node.replace_value(20);\n     assert_eq!(old_value, 10);\n     assert_eq!(node.value, 20);\n-}\n+}\n"
                },
                {
                    "date": 1731119466767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,10 @@\n         value: 10,\n     };\n \n     let mut next = node.take_next();\n+\n+    \n     if let Some(a) = next.take() {\n         println!(\"a: {}\", a.value);\n     } else {\n         println!(\"next is None\");\n@@ -45,5 +47,5 @@\n     // replace 经常用于处理可变引用\n     let old_value = node.replace_value(20);\n     assert_eq!(old_value, 10);\n     assert_eq!(node.value, 20);\n-}\n\\ No newline at end of file\n+}\n"
                },
                {
                    "date": 1731119472717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,10 @@\n         value: 10,\n     };\n \n     let mut next = node.take_next();\n+    next.ta\n \n-    \n     if let Some(a) = next.take() {\n         println!(\"a: {}\", a.value);\n     } else {\n         println!(\"next is None\");\n"
                },
                {
                    "date": 1731119479901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         value: 10,\n     };\n \n     let mut next = node.take_next();\n-    next.ta\n+    next.take_if(predicate)\n \n     if let Some(a) = next.take() {\n         println!(\"a: {}\", a.value);\n     } else {\n"
                },
                {
                    "date": 1731119487276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         value: 10,\n     };\n \n     let mut next = node.take_next();\n-    next.take_if(predicate)\n+    next\n \n     if let Some(a) = next.take() {\n         println!(\"a: {}\", a.value);\n     } else {\n"
                },
                {
                    "date": 1731119501535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         value: 10,\n     };\n \n     let mut next = node.take_next();\n-    next\n+    next.try_into()\n \n     if let Some(a) = next.take() {\n         println!(\"a: {}\", a.value);\n     } else {\n"
                },
                {
                    "date": 1731119507225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         value: 10,\n     };\n \n     let mut next = node.take_next();\n-    next.try_into()\n+    next\n \n     if let Some(a) = next.take() {\n         println!(\"a: {}\", a.value);\n     } else {\n"
                },
                {
                    "date": 1731119524159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         value: 10,\n     };\n \n     let mut next = node.take_next();\n-    next\n+    next.ok\n \n     if let Some(a) = next.take() {\n         println!(\"a: {}\", a.value);\n     } else {\n"
                },
                {
                    "date": 1731119529395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         value: 10,\n     };\n \n     let mut next = node.take_next();\n-    next.ok\n+    next.ok_or(error!(\"next is None\"))\n \n     if let Some(a) = next.take() {\n         println!(\"a: {}\", a.value);\n     } else {\n"
                },
                {
                    "date": 1731119534564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         value: 10,\n     };\n \n     let mut next = node.take_next();\n-    next.ok_or(error!(\"next is None\"))\n+    assert_eq!(next.as_ref().unwrap().value, 42);\n \n     if let Some(a) = next.take() {\n         println!(\"a: {}\", a.value);\n     } else {\n"
                },
                {
                    "date": 1731119564854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         value: 10,\n     };\n \n     let mut next = node.take_next();\n-    assert_eq!(next.as_ref().unwrap().value, 42);\n+    \n \n     if let Some(a) = next.take() {\n         println!(\"a: {}\", a.value);\n     } else {\n"
                },
                {
                    "date": 1731119570411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         value: 10,\n     };\n \n     let mut next = node.take_next();\n-    \n+    next.ok\n \n     if let Some(a) = next.take() {\n         println!(\"a: {}\", a.value);\n     } else {\n"
                },
                {
                    "date": 1731119583215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,9 @@\n         value: 10,\n     };\n \n     let mut next = node.take_next();\n-    next.ok\n-\n+    \n     if let Some(a) = next.take() {\n         println!(\"a: {}\", a.value);\n     } else {\n         println!(\"next is None\");\n"
                },
                {
                    "date": 1731119592740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,17 +32,17 @@\n     };\n \n     let mut next = node.take_next();\n     \n-    if let Some(a) = next.take() {\n-        println!(\"a: {}\", a.value);\n-    } else {\n-        println!(\"next is None\");\n-    }\n+    // if let Some(a) = next.take() {\n+    //     println!(\"a: {}\", a.value);\n+    // } else {\n+    //     println!(\"next is None\");\n+    // }\n \n-    // let next = next.unwrap();\n-    // assert_eq!(next.value, 42);\n-    // assert_eq!(node.value, 10);\n+    let next = next.unwrap();\n+    assert_eq!(next.value, 42);\n+    assert_eq!(node.value, 10);\n \n     // replace 经常用于处理可变引用\n     let old_value = node.replace_value(20);\n     assert_eq!(old_value, 10);\n"
                }
            ],
            "date": 1731118852106,
            "name": "Commit-0",
            "content": "fn advanced_take_replace() {\n    // take 经常用于处理Option\n    let mut opt = Some(42);\n    let value = mem::take(&mut opt);\n    assert_eq!(value, Some(42));\n    assert_eq!(opt, None);\n\n    // 链表节点替换示例\n    struct Node {\n        next: Option<Box<Node>>,\n        value: i32,\n    }\n\n    impl Node {\n        fn take_next(&mut self) -> Option<Box<Node>> {\n            mem::take(&mut self.next)\n        }\n\n        fn replace_value(&mut self, new_value: i32) -> i32 {\n            mem::replace(&mut self.value, new_value)\n        }\n    }\n}"
        }
    ]
}